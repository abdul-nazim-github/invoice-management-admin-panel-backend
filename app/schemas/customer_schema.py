from marshmallow import Schema, fields, validate, ValidationError

# Reusable validator for names
def is_valid_name(name):
    """
    Custom validator to ensure a name is not just whitespace.
    Marshmallow's built-in length check handles emptiness, but this adds robustness.
    """
    if not name.strip():
        raise ValidationError("Name must contain non-whitespace characters.")

class CustomerSchema(Schema):
    """
    Marshmallow schema for validating customer data.
    """
    id = fields.Int(dump_only=True) # `id` is generated by the database, so it's only for output
    name = fields.Str(
        required=True,
        validate=[
            validate.Length(min=2, error="Name must be at least 2 characters long."),
            is_valid_name
        ],
        error_messages={"required": "Name is a required field."}
    )
    email = fields.Email(
        required=True,
        error_messages={"required": "Email is a required field.", "invalid": "Not a valid email address."}
    )
    phone = fields.Str(
        required=True,
        validate=validate.Regexp(
            r"^\+?[0-9]{10,15}$",
            error="Invalid phone number format. Must be 10-15 digits, optionally starting with '+'."
        )
    )
    address = fields.Str(required=True)
    gst_number = fields.Str(
        required=True,
        validate=validate.Regexp(
            r"^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$",
            error="Invalid GST number format. The format should be like '29ABCDE1234F1Z5'."
        )
    )
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
    invoice_count = fields.Int(dump_only=True)
    payment_status = fields.Str(dump_only=True)
